server:
  port: 8082

spring:
  application:
    name: order-service
  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:mem:orderdb
    username: sa
    password: password
    hikari:
      pool-name: H2Pool
      maximum-pool-size: 10
  jpa:
    hibernate:
      ddl-auto: update  # Automatically create the schema (use 'create' or 'update')
    show-sql: true      # Show SQL queries in the console
    database-platform: org.hibernate.dialect.H2Dialect
  cloud:
    function:
      definition: productConsumer;productEvent
    stream:
      bindings:
        productConsumer-in-0:  # binding name
          destination: productConsumer-topic # Topic
          group: productConsumer-group
          content-type: application/json
        productEvent-in-0:  # binding name
          destination: productSupplier-topic # Topic
          content-type: application/json
          group: productEvent-group
        productEvent-out-0:
          content-type: application/json
          destination: productConsumer-topic
      kafka:
        binder:
          brokers: localhost:9092
  data:
    redis:
      port: 6379
      host: localhost
#    zipkin and health monitoring
management:
  endpoints:
    web:
      exposure:
        include: mappings,health
  tracing:
    enabled: true
    sampling:
      probability: 1.0
  zipkin:
    tracing:
      enabled: true
      endpoint: http://localhost:9411/api/v2/spans




# Eureka
eureka:
  instance:
    preferIpAddress: true
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
    enabled: true


product-service:
  url=http://localhost:8081:

resilience4j:
  circuitbreaker:
    configs:
      default:
        register-health-indicator: true
        sliding-window-size: 5
        permitted-number-of-calls-in-half-open-state:  3
        wait-duration-in-open-state:
          seconds: 5s
        failure-rate-threshold: 20
    instances:
      order-service:
        baseConfig: default
  retry:
    instances:
      retryOrderService:
        max-attempts: 5
        wait-duration: 1000
        retry-exceptions:
          - java.util.concurrent.TimeoutException
  ratelimiter:
    configs:
      default:
        timeoutDuration: 1000ms
        limitRefreshPeriod: 5000ms
        limitForPeriod: 5
    instances:
      order-service:
        baseConfig: default




