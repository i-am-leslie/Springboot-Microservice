version: "3.8"
services:
  config-server:
    image: iamleslie/config-server:latest
    container_name: config-server
    ports:
      - "8045:8045"

  eureka-server:
    image: iamleslie/eureka-server:latest
    container_name: eureka-server
    depends_on:
      - zipkin
    ports:
      - "8761:8761"

  gateway-server:
    image: iamleslie/gateway-server:latest
    container_name: gateway-server
    ports:
      - "8080:8080"
    depends_on:
      - eureka-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_SERVER_URL= http://eureka-server:8761/eureka/


  product-service:
    image: iamleslie/product-service:latest
    restart: on-failure
    container_name: product-service
    ports:
      - "8081:8081"
    depends_on:
      - eureka-server
      - kafka
      - redis
      - db
      - config-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8045
      - EUREKA_SERVER_URL=http://eureka-server:8761/eureka/
      - POSTGRES_USER=admin       # Username
      - POSTGRES_PASSWORD=password # Password
      - SPRING_CLOUD_CONFIG_FAILFAST=true


  order-service:
    image: iamleslie/order-service:latest
    restart: on-failure
    container_name: order-service
    ports:
      - "8082:8082"
    depends_on:
      - eureka-server
      - kafka
      - redis
      - db
      - adminer
      - config-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8045
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.PostgreSQLDialect # Ensure it uses postgres dialect
      #      Redis needs this env variable to run order service
      - JAVA_TOOL_OPTIONS=--add-opens=java.base/java.nio.charset=ALL-UNNAMED
      - EUREKA_SERVER_URL= http://eureka-server:8761/eureka/
      - POSTGRES_USER=admin       # Username
      - POSTGRES_PASSWORD=password
      - BROKER_ADDRESS=broker:9092


  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"


  kafka:
    image: apache/kafka:latest
    container_name: broker
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://broker:9092,CONTROLLER://broker:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
    ports:
      - "9092:9092"
  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
  db:
    image: postgres
    restart: always
    # set shared memory limit when using docker-compose
    shm_size: 128mb
    # or set shared memory limit when deploy via swarm stack
    #volumes:
    #  - type: tmpfs
    #    target: /dev/shm
    #    tmpfs:
    #      size: 134217728 # 128*2^20 bytes = 128Mb
    environment:
      POSTGRES_USER: admin       # Username
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
  adminer:
    image: adminer
    restart: always
    ports:
      - "8089:8080"
#  prometheus:
#    image: prom/prometheus
#    container_name: prometheus
#    ports:
#      - "9090:9090"
#  grafana:
#    image: grafana/grafana
#    container_name: grafana
#    restart: always
#    ports:
#      - "3003:3003"


